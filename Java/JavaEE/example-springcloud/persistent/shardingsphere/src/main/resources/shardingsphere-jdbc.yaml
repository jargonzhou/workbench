# https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/
# org.apache.shardingsphere.driver.yaml.YamlJDBCConfiguration
# syntax
# !! 表示实例化该类
# ! 表示自定义别名
# - 表示可以包含一个或多个
# [] 表示数组，可以与减号相互替换使用

# JDBC 逻辑库名称。在集群模式中，使用该参数来联通 ShardingSphere-JDBC 与 ShardingSphere-Proxy。
# 默认值：logic_db
#databaseName (?):

# 模式: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
mode:
  type: Standalone
  repository:
    type: JDBC

# 数据源: org.apache.shardingsphere.driver.api.ShardingSphereDataSourceFactory
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/ds_0?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&allowMultiQueries=true
    username: root
    password: change_me
    maxPoolSize: 10
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/ds_1?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&allowMultiQueries=true
    username: root
    password: change_me
    maxPoolSize: 10

# 规则配置: org.apache.shardingsphere.infra.config.rule.RuleConfiguration
rules:
#  - !SHARDING
#    tables: # 数据分片规则配置
#      <logic_table_name> (+): # 逻辑表名称
#        actualDataNodes (?): # 由数据源名 + 表名组成（参考 Inline 语法规则）
#        databaseStrategy (?): # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
#          standard: # 用于单分片键的标准分片场景
#            shardingColumn: # 分片列名称
#            shardingAlgorithmName: # 分片算法名称
#          complex: # 用于多分片键的复合分片场景
#            shardingColumns: # 分片列名称，多个列以逗号分隔
#            shardingAlgorithmName: # 分片算法名称
#          hint: # Hint 分片策略
#            shardingAlgorithmName: # 分片算法名称
#          none: # 不分片
#        tableStrategy: # 分表策略，同分库策略
#        keyGenerateStrategy: # 分布式序列策略
#          column: # 自增列名称，缺省表示不使用自增主键生成器
#          keyGeneratorName: # 分布式序列算法名称
#        auditStrategy: # 分片审计策略
#          auditorNames: # 分片审计算法名称
#            - <auditor_name>
#            - <auditor_name>
#          allowHintDisable: true # 是否禁用分片审计hint
#    autoTables: # 自动分片表规则配置
#      t_order_auto: # 逻辑表名称
#        actualDataSources (?): # 数据源名称
#        shardingStrategy: # 切分策略
#          standard: # 用于单分片键的标准分片场景
#            shardingColumn: # 分片列名称
#            shardingAlgorithmName: # 自动分片算法名称
#    bindingTables (+): # 绑定表规则列表
#      - <logic_table_name_1, logic_table_name_2, ...>
#      - <logic_table_name_1, logic_table_name_2, ...>
#    defaultDatabaseStrategy: # 默认数据库分片策略
#    defaultTableStrategy: # 默认表分片策略
#    defaultKeyGenerateStrategy: # 默认的分布式序列策略
#    defaultShardingColumn: # 默认分片列名称
#
#    # 分片算法配置
#    shardingAlgorithms:
#      <sharding_algorithm_name> (+): # 分片算法名称
#        type: # 分片算法类型
#        props: # 分片算法属性配置
#        # ...
#
#    # 分布式序列算法配置
#    keyGenerators:
#      <key_generate_algorithm_name> (+): # 分布式序列算法名称
#        type: # 分布式序列算法类型
#        props: # 分布式序列算法属性配置
#        # ...
#    # 分片审计算法配置
#    auditors:
#      <sharding_audit_algorithm_name> (+): # 分片审计算法名称
#        type: # 分片审计算法类型
#        props: # 分片审计算法属性配置
#        # ...
  # 数据分片规则配置: org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
  - !SHARDING
    tables:
      # 订单表
      t_order:
        actualDataNodes: ds_$->{0..1}.t_order_$->{0..1}
        tableStrategy: # 按order_id分表
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_inline
        keyGenerateStrategy: # 主键
          column: order_id
          keyGeneratorName: snowflake_generator
      # 订单项表
      t_order_item:
        actualDataNodes: ds_$->{0..1}.t_order_item_$->{0..1}
        tableStrategy: # 按order_id分表
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_item_inline
        keyGenerateStrategy: # 主键
          column: order_item_id
          keyGeneratorName: snowflake_generator
    # 绑定表
    bindingTables:
      - t_order,t_order_item
    # 默认数据库分片策略: 按user_id分库
    defaultDatabaseStrategy:
      standard:
        shardingColumn: user_id
        shardingAlgorithmName: database_inline
    # 分片算法配置: org.apache.shardingsphere.infra.algorithm.core.config.AlgorithmConfiguration
    shardingAlgorithms:
      database_inline:
        type: INLINE
        props:
          algorithm-expression: ds_${user_id % 2}

      t_order_inline:
        type: INLINE
        props:
          algorithm-expression: t_order_$->{order_id % 2}
      t_order_item_inline:
        type: INLINE
        props:
          algorithm-expression: t_order_item_$->{order_id % 2}
    # 分布式序列算法配置
    keyGenerators:
      snowflake_generator:
        type: SNOWFLAKE

  # 广播表规则列表
  - !BROADCAST # org.apache.shardingsphere.infra.config.rule.RuleConfiguration
    tables:
      - t_address

# 分布式事务支持配置: org.apache.shardingsphere.transaction.config.TransactionRuleConfiguration
transaction:
#  defaultType: # Transaction mode, optional value LOCAL/XA/BASE
#  providerType: # Specific implementation of the mode
  defaultType: LOCAL

# 属性配置: https://shardingsphere.apache.org/document/current/en/user-manual/common-config/props/
props:
  sql-show: true